%{
#include <stdio.h>
#include <string.h>
#include <miniJava.h>

void yyerror (const char *s);

int yylex();

int yywrap()
{
	return 1;
}

%}

%locations 

%union{
	char Val[256];
	int Int;
	TBinaryOperation BinopType;
}

%token <Int> NUMBER
%token CLASS
%token PUBLIC
%token STATIC
%token VOID
%token MAIN
%token STRING 
%token INT_T
%token BOOL_T
%token IF
%token ELSE
%token WHILE
%token SYSOUT
%token LENGTH
%token TRUE
%token FALSE
%token THIS
%token NEW
%token <Val> ID
%token COMMENT
%token RETURN
%token INTEGERLITERAL
%token EXTENDS

%left '.' '['
%left <BinopType> BINOP
%left '!'

%%
Program:
	MainClass ClassDeclStar
	;

MainClass:
	CLASS ID '{' PUBLIC STATIC VOID MAIN '(' STRING '[' ']' ID ')' '{' StatementStar '}' '}'
	;

ClassDeclStar:
	| ClassDeclStar ClassDecl

ClassDecl:
	CLASS ID '{' VarDeclStar MethodDeclStar '}'
	| CLASS ID EXTENDS ID '{' VarDeclStar MethodDeclStar '}'
	;

VarDeclStar: 
	| VarDeclStar VarDecl
	;

VarDecl:
	Type ID ';'
	;

MethodDeclStar:
	| MethodDeclStar MethodDecl
	;

MethodDecl:
	PUBLIC Type ID '(' FormalList ')' '{' VarDeclStar StatementStar RETURN Expression ';' '}'
	;

FormalList:
	| Type ID FormalRestStar
	;

FormalRestStar:
	| FormalRestStar FormalRest
	;

FormalRest:
	','' ' Type ID
	;

Type:
	INT_T '['']'
	| BOOL_T
	| INT_T
	| ID
	;

StatementStar:
	| Statement StatementStar
	;

Statement:
	'{' StatementStar '}'
	| IF '(' Expression ')' Statement ELSE Statement
	| WHILE '(' Expression ')' Statement
	| SYSOUT '(' Expression ')' ';'
	| ID '=' Expression';'
	| ID '[' Expression ']' '=' Expression ';'
	;

Expression:
	Expression BINOP Expression
	| Expression '[' Expression ']'
	| Expression '.' LENGTH
	| Expression '.' ID '(' ExpList ')'
	| NUMBER
	| TRUE
	| FALSE
	| ID
	| THIS
	| NEW INT_T '[' Expression ']'
	| NEW ID '(' ')'
	| '!' Expression
	| '(' Expression ')'
	;
	 
ExpList:
	| Expression
	| ExpRest ',' Expression

ExpRest:
	ExpRest ',' Expression
	| Expression
	; 

%%

void yyerror (const char *s)
{
	printf("Error in line %d: %s", yylloc.first_line, s);
}