#pragma once

class IProgram;
class IMainClass;
class IClassDeclare ;
class IClassDeclareStar;
class IVarDeclareStar;
class IVarDeclare;
class IMethodDeclareStar;
class IMethodDeclare;
class IFormalList;
class IFormalRestStar;
class IStatement;
class IStatementStar;
class IExpression;
class IExpList;
class CProgram;
class CMainClass;
class CClassDeclareStar;
class CClassDeclare;
class CClassDeclareExtends;
class CVarDeclareStar;
class CVarDeclare;
class CMethodDeclareStar;
class CMethodDeclare;
class CFormalList;
class CFormalRestStar;
class CStatementStar;
class CStatement;
class CStatementIf;
class CStatementWhile;
class CStatementSysOut;
class CStatementAssignment;
class CStatementArrayAssignment;
class CExpressionBinOp;
class CExpressionArray;
class CExpressionLength;
class CExpressionCallMethod;
class CExpressionNumber;
class CExpressionBool;
class CExpressionVar;
class CExpressionThis;
class CExpressionNewInt;
class CExpressionNewId;
class CExpressionNegation;
class CExpression;
class CExpList;
class CExpListNext;

class IVisitor {
public:
	virtual ~IVisitor() {}
	virtual int Visit( const CProgram* n ) = 0;
	virtual int Visit( const CMainClass* n ) = 0;
	virtual int Visit( const CClassDeclareStar* n ) = 0;
	virtual int Visit( const CClassDeclare* n ) = 0;
	virtual int Visit( const CClassDeclareExtends* n ) = 0;
	virtual int Visit( const CVarDeclareStar* n ) = 0;
	virtual int Visit( const CVarDeclare* n ) = 0;
	virtual int Visit( const CMethodDeclare* n ) = 0;
	virtual int Visit( const CMethodDeclareStar* n ) = 0;
	virtual int Visit( const CFormalList* n ) = 0;
	virtual int Visit( const CFormalRestStar* n ) = 0;
	virtual int Visit( const CStatement* n ) = 0;
	virtual int Visit( const CStatementStar* n ) = 0;
	virtual int Visit( const CStatementIf* n ) = 0;
	virtual int Visit( const CStatementWhile* n ) = 0;
	virtual int Visit( const CStatementSysOut* n ) = 0;
	virtual int Visit( const CStatementAssignment* n ) = 0;
	virtual int Visit( const CStatementArrayAssignment* n ) = 0;
	virtual int Visit( const CExpressionBinOp* n ) = 0;
	virtual int Visit( const CExpressionArray* n ) = 0;
	virtual int Visit( const CExpressionLength* n ) = 0;
	virtual int Visit( const CExpressionCallMethod* n ) = 0;
	virtual int Visit( const CExpressionNumber* n ) = 0;
	virtual int Visit( const CExpressionBool* n ) = 0;
	virtual int Visit( const CExpressionVar* n ) = 0;
	virtual int Visit( const CExpressionThis* n ) = 0;
	virtual int Visit( const CExpressionNewInt* n ) = 0;
	virtual int Visit( const CExpressionNewId* n ) = 0;
	virtual int Visit( const CExpressionNegation* n ) = 0;
	virtual int Visit( const CExpression* n ) = 0;
	virtual int Visit( const CExpList* n ) = 0;
	virtual int Visit( const CExpListNext* n ) = 0;
};