%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "miniJava.h"
#include "bison.hpp"

#pragma warning(disable:4273)
#pragma warning(disable:4996)
#define YY_USER_ACTION yylloc.first_line = yylloc.last_line = yylineno;
%}

%option yylineno
%option noyywrap

%%

&& {
	yylval.BinopType = AND;
	return BINOP;
}

"==" {
	yylval.BinopType = EQUALS;
	return BINOP;
}
"<" {
	yylval.BinopType = LESS;
	return BINOP;
}
"+" {
	yylval.BinopType = PLUS;
	return BINOP;
}
"-" {
	yylval.BinopType = MINUS;
	return BINOP;
}
"*" {
	yylval.BinopType = TIMES;
	return BINOP;
}

[0-9]+ {
	yylval.Int = atoi(yytext);//CSymbol::CSymbolGet( string(yytext, yyleng) );
	return NUMBER;
}

"class" {return CLASS;}
"public" {return PUBLIC;}
"static" {return STATIC;}
"void" {return VOID;}
"main" {return MAIN;}
"String" {return STRING;}
"int" {return INT_T;}
"boolean" {return BOOL_T;}
"if" {return IF;}
"else" {return ELSE;}
"while" {return WHILE;}
"System.out.println" {return SYSOUT;}
"length" {return LENGTH;}
"true" {return TRUE;}
"false" {return FALSE;}
"this" {return THIS;}
"new" {return NEW;}
"return" {return RETURN;}
"extends" {return EXTENDS;}

(_)?[a-zA-Z][a-zA-Z_0-9]* {
	yylval.Name = CSymbol::CSymbolGet( string(yytext, yyleng) );
	return ID;
}

\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\/|\/\/.*

[\n]+ ;
[ \t] ;

. return *yytext;

%%