%{
#include <stdio.h>
#include <string.h>

void yyerror( const char *str )
{
	fprintf( stderr, "error: %s\n", str );
}

int yywrap()
{
	return 1;
}

int main()
{
	yyparse();
}

%}

%token Binop
%token Number
%token CLASS
%token PUBLIC
%token STATIC
%token VOID
%token MAIN
%token STRING 
%token INT
%token BOOL
%token IF
%token ELSE
%token WHILE
%token SYSOUT
%token LENGTH
%token TRUE
%token FALSE
%token THIS
%token NEW
%token ID
%token Comment

%%

Program:
	MainClass ClassDeclStar
	;

MainClass:
	CLASS ID '{' PUBLIC STATIC VOID MAIN '(' STRING '['']' ID ')' '{' Statement '}''}'
	;

ClassDeclStar:
	| ClassDeclStar ClassDecl

ClassDecl:
	CLASS ID '{' VarDeclStar MethodDeclStar '}'
	| CLASS ID EXTENDS ID '{' VarDeclStar MethodDeclStar '}'
	;

VarDeclStar: 
	| VarDeclStar VarDecl
	;

VarDecl:
	Type ID ';'
	;

MethodDeclStar:
	| MethodDeclStar MethodDecl
	;

MethodDecl:
	PUBLIC Type ID '(' FormalList ')' '{' VarDeclStar StatementStar RETURN Expression ';' '}'
	;

FormalList:
	| Type ID FormalRestStar
	;

FormalRestStar:
	| FormalRestStar FormalRest
	;

FormalRest:
	','' ' Type ID
	;

Type:
	INT '['']'
	| BOOLEAN
	| INT
	| ID
	;

StatementStar:
	| StatementStar Statement
	;

Statement:
	'(' StatementStar ')'
	| IF '(' Expression ')' Statenent ELSE Statement
	| WHILE '(' Expression ')' Statenent
	| SYSOUT '(' Expression ')' ';'
	| ID '=' Expression';'
	| ID '[' Expression ']' '=' Expression ';'
	;

Expression:
	Expression BINOP Expression
	| Expression '[' Expression ']'
	| Expression '.' LENGTH
	| Expression '.' ID '(' ExpList ')'
	| INTEGERLITERAL
	| TRUE
	| FALSE
	| ID
	| THIS
	| NEW INT '[' Expression ']'
	| NEW ID '(' ')'
	| '!' Expression
	| '(' Expression ')'
	;

ExpList:
	| ExpRestStar Expression
	;

ExpRestStar:
	| ExpRestStar ExpRest
	;

ExpRest:
	| ' ' ',' Expression
	; 

%%

void yyerror(const char *s) 
{
  fprintf(stderr, "%s\n", s);
}

int main()
{
	yyparse();
	return 0;
}