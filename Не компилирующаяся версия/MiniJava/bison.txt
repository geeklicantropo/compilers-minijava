%{
#include <stdio.h>
#include <string.h>

int yylex();

void yyerror( const char *str )
{
	fprintf( stderr, "error: %s\n", str );
}

int yywrap()
{
	return 1;
}

%}

%token NUMBER
%token CLASS
%token PUBLIC
%token STATIC
%token VOID
%token MAIN
%token STRING 
%token INT_T
%token BOOL_T
%token IF
%token ELSE
%token WHILE
%token SYSOUT
%token LENGTH
%token TRUE
%token FALSE
%token THIS
%token NEW
%token ID
%token COMMENT
%token RETURN
%token INTEGERLITERAL
%token EXTENDS

%left '.' '['BINOP
%right '!'

%%

Program:
	MainClass ClassDecl
	;

MainClass:
	CLASS ID '{' PUBLIC STATIC VOID MAIN '(' STRING '['']' ID ')' '{' Statement '}''}'
	;

ClassDecl:
	CLASS ID '{' VarDecl MethodDecl '}'
	| CLASS ID EXTENDS ID '{' VarDecl MethodDecl '}'
	;

VarDecl:
	Type ID ';'
	;

MethodDecl:
	PUBLIC Type ID '(' FormalList ')' '{' VarDecl Statement RETURN Expression ';' '}'
	;

FormalList:
	| Type ID FormalRest
	;

FormalRest:
	','' ' Type ID
	;

Type:
	INT_T '['']'
	| BOOL_T
	| INT_T
	| ID
	;

Statement:
	'{' Statement '}'
	| IF '(' Expression ')' Statement ELSE Statement
	| WHILE '(' Expression ')' Statement
	| SYSOUT '(' Expression ')' ';'
	| ID '=' Expression';'
	| ID '[' Expression ']' '=' Expression ';'
	;

Expression:
	Expression BINOP Expression
	| Expression '[' Expression ']'
	| Expression '.' LENGTH
	| Expression '.' ID '(' ExpList ')'
	| INTEGERLITERAL
	| TRUE
	| FALSE
	| ID
	| THIS
	| NEW INT_T '[' Expression ']'
	| NEW ID '(' ')'
	| '(' Expression ')'
	| '!' Expression
	;

ExpList:
	| ExpRest Expression
	;

ExpRest:
	',' Expression
	; 

%%