%{
#include <stdio.h>
#include <string.h>
#include "miniJava.h"
%}
%code requires{
#include "Symbols.h"
}

%{
void yyerror ( const char *s );

int yylex();

int yywrap()
{
	return 1;
}

%}

%locations 

%union{
	char Val[256];
	int Int;
	bool Bool;
	TBinaryOperation BinopType;
	IMainClass* MainClass;
	IProgram* Program;
	IClassDeclareStar* ClassDeclStar;
	IClassDeclare* ClassDecl;
	IVarDeclareStar* VarDeclStar;
	IVarDeclare* VarDecl;
	IMethodDeclareStar* MethodDeclStar;
	IMethodDeclare* MethodDecl;
	IFormalList* FormalList;
	IFormalRestStar* FormalRestStar;
	IStatementStar* StatementStar;
	IStatement* Statement;
	IExpression* Expression;
	IExpList* ExpList;
	const CSymbol* Name;
}

%token <Name> NUMBER
%token CLASS
%token PUBLIC
%token STATIC
%token VOID
%token MAIN
%token STRING 
%token INT_T
%token BOOL_T
%token IF
%token ELSE
%token WHILE
%token SYSOUT
%token LENGTH
%token <Bool> TRUE
%token <Bool> FALSE
%token THIS
%token NEW
%token <Name> ID
%token COMMENT
%token RETURN
%token INTEGERLITERAL
%token EXTENDS

%left '.' '['
%left <BinopType> BINOP
%left '!'

%type <Program> Program
%type <MainClass> MainClass
%type <ClassDeclStar> ClassDeclStar
%type <ClassDecl> ClassDecl
%type <VarDeclStar> VarDeclStar
%type <VarDecl> VarDecl
%type <MethodDeclStar> MethodDeclStar
%type <MethodDecl> MethodDecl
%type <FormalList> FormalList
%type <FormalRestStar> FormalRestStar
%type <StatementStar> StatementStar
%type <Statement> Statement
%type <Name> Type
%type <Expression> Expression
%type <ExpList> ExpList
%type <ExpList> ExpRest

%%
Program:
	MainClass ClassDeclStar {
		$$ = new CProgram( $1, $2 );
		$$ -> Accept( new CInterpreter() );
	}
	;

MainClass:
	CLASS ID '{' PUBLIC STATIC VOID MAIN '(' STRING '[' ']' ID ')' '{' Statement '}' '}' {
		$$ = new CMainClass( $2,  $12, $15 );
	}
	| CLASS ID '{' error '}' {
		printf ( "error1 in Main class in line %d\n", yylloc.first_line ); 
	}
	| CLASS ID '{' PUBLIC STATIC VOID MAIN '(' STRING '[' ']' ID ')' '{' error '}' '}' { 
		printf ( "error2 in Main class in line %d \n", yylloc.first_line ); 
	}
	;

ClassDeclStar:
	{
		$$ = NULL;
	}
	| ClassDeclStar ClassDecl {
		$$ = new CClassDeclareStar( $1, $2 );
	}

ClassDecl:
	CLASS ID '{' VarDeclStar MethodDeclStar '}' {
		$$ = new CClassDeclare( $2, $4, $5 );
	}
	| CLASS ID EXTENDS ID '{' VarDeclStar MethodDeclStar '}' {
		$$ = new CClassDeclareExtends( $2, $4, $6, $7 );
	}
	| CLASS ID '{' error '}'			{ printf ( "error1 in class declaration in line %d\n", yylloc.first_line ); }
	| CLASS ID EXTENDS ID '{' error '}' { printf ( "error2 in class declaration in line %d\n", yylloc.first_line ); }

	;

VarDeclStar: 
	{
		$$ = NULL;
	}
	| VarDeclStar VarDecl {
		$$ = new CVarDeclareStar( $1, $2 );
	}
	;

VarDecl:
	Type ID ';' {
		$$ = new CVarDeclare( $1, $2 );
	}
	| Type ID error ';' { printf ( "var declaration in line %d\n", yylloc.first_line ); }
	;

MethodDeclStar:
	{
		$$ = NULL;
	}
	| MethodDeclStar MethodDecl {
		$$ = new CMethodDeclareStar( $1, $2 );
	}
	;

MethodDecl:
	PUBLIC Type ID '(' FormalList ')' '{' VarDeclStar StatementStar RETURN Expression ';' '}' {
		$$ = new CMethodDeclare( $2, $3, $5, $8, $9, $11 );
	}
	;

FormalList:
	{
		$$ = NULL;
	}
	| Type ID FormalRestStar {
		$$ = new CFormalList( $1, $2, $3 );
	}
	;

FormalRestStar:
	{
		$$ = NULL;
	}
	| ','' ' Type ID FormalRestStar {
		$$ = new CFormalRestStar( $3, $4, $5 );
	}
	;

Type:
	INT_T '['']' {
		$$ = CSymbol::CSymbolGet( "int[]" );
	}
	| BOOL_T {
		$$ = CSymbol::CSymbolGet( "boolean" );
	}
	| INT_T {
		$$ = CSymbol::CSymbolGet( "int" );
	}
	| ID {
		$$ = $1;
	}
	;

StatementStar:
	{
		$$ = NULL;
	}
	| Statement StatementStar {
		$$ = new CStatementStar( $1, $2 );
	}
	;

Statement:
	'{' StatementStar '}' {
		$$ = new CStatement( $2 );
	}
	| IF '(' Expression ')' Statement ELSE Statement {
		$$ = new CStatementIf( $3, $5, $7 );
	}
	| WHILE '(' Expression ')' Statement {
		$$ = new CStatementWhile( $3, $5 );
	}
	| SYSOUT '(' Expression ')' ';' {
		$$ = new CStatementSysOut( $3 );
	}
	| ID '=' Expression';' {
		$$ = new CStatementAssignment( $1, $3 );
	}
	| ID '[' Expression ']' '=' Expression ';' {
		$$ = new CStatementArrayAssignment( $1, $3, $6 );
	}
	| error ';' { printf ("statement error in line %d\n", yylloc.first_line); $$ = new CStatement( 0 ); }
	;

Expression:
	Expression BINOP Expression {
		$$ = new CExpressionBinOp( $1, $2, $3 );
	}
	| Expression '[' Expression ']' {
		$$ = new CExpressionArray( $1, $3 );
	}
	| Expression '.' LENGTH {
		$$ = new CExpressionLength( $1 );
	}
	| Expression '.' ID '(' ExpList ')' {
		$$ = new CExpressionCallMethod( $1, $3, $5 );
	}
	| NUMBER {
		$$ = new CExpressionNumber( $1 );
	}
	| TRUE {
		$$ = new CExpressionBool( $1 );
	}
	| FALSE {
		$$ = new CExpressionBool( $1 );
	}
	| ID {
		$$ = new CExpressionVar( $1 );
	}
	| THIS {
		$$ = new CExpressionThis();
	}
	| NEW INT_T '[' Expression ']' {
		$$ = new CExpressionNewInt( $4 );
	}
	| NEW ID '(' ')' {
		$$ = new CExpressionNewId( $2 );
	}
	| '!' Expression {
		$$ =  new CExpressionNegation( $2 );
	}
	| '(' Expression ')' {
		$$ = new CExpression( $2 );
	}
	;
	 
ExpList:
	{
		$$ = NULL;
	}
	| Expression {
		$$ = new CExpList( $1 );
	}
	| ExpRest ',' Expression {
		$$ = new CExpListNext( $1, $3 );
	}

ExpRest:
	ExpRest ',' Expression {
		$$ = new CExpListNext( $1, $3 );
	}
	| Expression {
		$$ = new CExpList( $1 );
	}
	; 
 
%%

void yyerror (const char *s)
{
	//printf("Error in line %d: %s \n", yylloc.first_line, s);
}